spring:
  application:
    name: sports-data-etl-pipeline
  
  datasource:
    url: jdbc:h2:mem:sportsdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    driver-class-name: org.h2.Driver
    username: sa
    password: password
    
  h2:
    console:
      enabled: true
      path: /h2-console
      
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
        format_sql: true
        
  jackson:
    serialization:
      write-dates-as-timestamps: false
    time-zone: UTC

# Logging Configuration
logging:
  level:
    com.sportsdata.etl: INFO
    org.springframework: WARN
    org.hibernate: WARN
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    
  file:
    name: logs/etl-pipeline.log

# Management and Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true

# ETL Pipeline Configuration
etl:
  pipeline:
    batch-size: 1000
    retry-attempts: 3
    timeout-seconds: 300
    
  data-sources:
    teams-csv: "src/main/resources/sample-data/teams.csv"
    players-json: "src/main/resources/sample-data/players.json"
    games-xml: "src/main/resources/sample-data/games.xml"
    
  quality:
    minimum-score: 0.7
    fail-on-poor-quality: false
    
  monitoring:
    metrics-enabled: true
    detailed-logging: true

# Server Configuration
server:
  port: 8080
  servlet:
    context-path: /api/v1

---
# Production Profile
spring:
  config:
    activate:
      on-profile: production
      
  datasource:
    url: jdbc:postgresql://localhost:5432/postgres
    driver-class-name: org.postgresql.Driver
    username: ${DB_USERNAME:sportsuser}
    password: ${DB_PASSWORD:sportspass}
    
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: false
    
logging:
  level:
    com.sportsdata.etl: INFO
    org.springframework: WARN
    org.hibernate.SQL: WARN
    
---
# Test Profile
spring:
  config:
    activate:
      on-profile: test
      
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    
  jpa:
    hibernate:
      ddl-auto: create-drop
      
logging:
  level:
    com.sportsdata.etl: DEBUG
    org.springframework: INFO 